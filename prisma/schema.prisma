// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  hashPassword  String?
  image         String?
  nicNumber     String?
  address       String?
  mobile        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  booking       Booking[]
}

model Vendor {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  hashPassword  String?
  image         String?
  nicNumber     String?
  address       String?
  mobile        String?
  description   String?
  option        String?
  status        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      VendorAccount[]
  sessions      VendorSession[]
}

model VendorAccount {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  vendor Vendor @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VendorSession {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  vendor       Vendor   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Eventz {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  number      String
  imageUrl    String
  comapany    String
  email       String
  address     String
  description String
  option      String
  price       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Rating[]
}


model Booking {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sellerName    String
  userName      String
  sellerEmail   String
  userEmail     String
  creator       User     @relation(fields: [creatorId], references: [id])
  creatorId     String   @db.ObjectId
  price         String?
  mobile        String?
  bookingDate   String?
  category      String?
  creatorEmail  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Rating {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  comments      String
  eventz        Eventz   @relation(fields: [eventzId], references: [id])
  eventzId      String   @db.ObjectId
  creator       String
}
